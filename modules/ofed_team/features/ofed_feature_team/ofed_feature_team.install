<?php

/**
 * Implements hook_schema().
 */
function ofed_feature_team_schema() {
  
}

/**
 * Implements hook_install().
 */
function ofed_feature_team_install() {
  // If the related feature is not enabled.
  if (!module_exists('ofed_team')) {
    // Enable it.
    module_enable(array('ofed_team'));
  }

  // Include ds settings.
  $file = drupal_get_path('module', 'ofed_feature_team') . '/install/_ofed_feature_team.ds.inc';
  if (file_exists($file)) {
    // Include it.
    include_once 'install/_ofed_feature_team.ds.inc';

    // Install ds customs fields.
    if (function_exists('ofed_feature_team_ds_custom_fields_info')) {
      $fields = ofed_feature_team_ds_custom_fields_info();
      foreach ($fields as $id => $field) {
        // Remove one key.
        if (isset($field->api_version)) {
          unset($field->api_version);
        }
        // Serialize the entities.
        $field->entities = serialize($field->entities);
        // Serialize the ui_limit.
        $field->ui_limit = serialize($field->ui_limit);
        // Serialize the properties.
        $field->properties = serialize($field->properties);

        // Cast variable like an array.
        $field = (array) $field;

        // Save in database.
        db_insert('ds_fields')->fields($field)->execute();
      }
    }

    // Install ds fields settings.
    if (function_exists('ofed_feature_team_ds_field_settings_info')) {
      $fields = ofed_feature_team_ds_field_settings_info();
      foreach ($fields as $id => $field) {
        // Remove one key.
        if (isset($field->api_version)) {
          unset($field->api_version);
        }
        // Serialize the settings.
        $field->settings = serialize($field->settings);

        // Cast variable like an array.
        $field = (array) $field;

        // Save in database.
        db_insert('ds_field_settings')->fields($field)->execute();
      }
    }

    // Install ds layouts settings.
    if (function_exists('ofed_feature_team_ds_layout_settings_info')) {
      $layouts = ofed_feature_team_ds_layout_settings_info();
      foreach ($layouts as $id => $layout) {
        // Remove one key.
        if (isset($layout->api_version)) {
          unset($layout->api_version);
        }
        // Serialize the settings.
        $layout->settings = serialize($layout->settings);

        // Cast variable like an array.
        $layout = (array) $layout;

        // Save in database.
        db_insert('ds_layout_settings')->fields($layout)->execute();
      }
    }
  }

  // Create path alias for each languages.
  $languages = language_list('enabled');
  foreach ($languages as $language) {
    // FR.
    if (isset($language['fr'])) {
      $path = array(
        'source' => 'team-members',
        'alias' => 'collegues',
        'language' => 'fr',
      );
      db_insert('url_alias')->fields($path)->execute();
    }

    if (isset($language['nl'])) {
      // NL.
      $path = array(
        'source' => 'team-members',
        'alias' => 'collegas',
        'language' => 'nl',
      );
      db_insert('url_alias')->fields($path)->execute();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function ofed_feature_team_uninstall() {
  // If the related feature is enabled.
  if (module_exists('ofed_team')) {
    // Disable it.
    module_disable(array('ofed_team'));
  }
}

/**
 * Update display suite settings.
 */
function ofed_feature_team_update_7001() {
  // Include ds settings.
  $file = drupal_get_path('module', 'ofed_feature_team') . '/install/_ofed_feature_team.ds.inc';
  if (file_exists($file)) {
    // Include it.
    include_once 'install/_ofed_feature_team.ds.inc';

    // Install ds customs fields.
    if (function_exists('ofed_feature_team_ds_custom_fields_info')) {
      $fields = ofed_feature_team_ds_custom_fields_info();
      foreach ($fields as $id => $field) {
        // Remove one key.
        if (isset($field->api_version)) {
          unset($field->api_version);
        }
        // Serialize the entities.
        $field->entities = serialize($field->entities);
        // Serialize the ui_limit.
        $field->ui_limit = serialize($field->ui_limit);
        // Serialize the properties.
        $field->properties = serialize($field->properties);

        // Cast variable like an array.
        $field = (array) $field;

        // delete from database as they might not be updated
        db_delete('ds_fields')
          ->condition('field', $field['field'], '=')
          ->execute();

        // Save in database.
        db_insert('ds_fields')->fields($field)->execute();
      }
    }

    // Install ds fields settings.
    if (function_exists('ofed_feature_team_ds_field_settings_info')) {
      $fields = ofed_feature_team_ds_field_settings_info();
      foreach ($fields as $id => $field) {
        // Remove one key.
        if (isset($field->api_version)) {
          unset($field->api_version);
        }
        // Serialize the settings.
        $field->settings = serialize($field->settings);

        // Cast variable like an array.
        $field = (array) $field;

        // delete from database as they might not be updated
        db_delete('ds_field_settings')
          ->condition('id', $field['id'], '=')
          ->execute();

        // Save in database.
        db_insert('ds_field_settings')->fields($field)->execute();
      }
    }

    // Install ds layouts settings.
    if (function_exists('ofed_feature_team_ds_layout_settings_info')) {
      $layouts = ofed_feature_team_ds_layout_settings_info();
      foreach ($layouts as $id => $layout) {
        // Remove one key.
        if (isset($layout->api_version)) {
          unset($layout->api_version);
        }
        // Serialize the settings.
        $layout->settings = serialize($layout->settings);

        // Cast variable like an array.
        $layout = (array) $layout;

        // delete from database as they might not be updated
        db_delete('ds_layout_settings')
          ->condition('id', $layout['id'], '=')
          ->execute();

        // Save in database.
        db_insert('ds_layout_settings')->fields($layout)->execute();
      }
    }

    cache_clear_all();
  }
}

/**
 * Add patterns for taxonomy paths.
 */
function ofed_feature_team_update_7002() {
  // Add the new variables for path alias patterns.
  $pattern_default = variable_get('pathauto_taxonomy_term_ofed_team_pattern', '');
  if (empty($pattern_default)) {
    variable_set('pathauto_taxonomy_term_ofed_team_pattern', '[term:vocabulary:i18n-name]/[term:name]');
  }
  $pattern_en = variable_get('pathauto_taxonomy_term_ofed_team_en_pattern', '');
  if (empty($pattern_en)) {
    variable_set('pathauto_taxonomy_term_ofed_team_en_pattern', 'team-members/[term:name]');
  }
  $pattern_nl = variable_get('pathauto_taxonomy_term_ofed_team_nl_pattern', '');
  if (empty($pattern_nl)) {
    variable_set('pathauto_taxonomy_term_ofed_team_nl_pattern', 'collegas/[term:name]');
  }
  $pattern_fr = variable_get('pathauto_taxonomy_term_ofed_team_fr_pattern', '');
  if (empty($pattern_fr)) {
    variable_set('pathauto_taxonomy_term_ofed_team_fr_pattern', 'collegues/[term:name]');
  }
  $pattern_default = variable_get('pathauto_taxonomy_term_ofed_team_civility_pattern', '');
  if (empty($pattern_default)) {
    variable_set('pathauto_taxonomy_term_ofed_team_civility_pattern', '[term:vocabulary:i18n-name]/[term:name]');
  }
  $pattern_en = variable_get('pathauto_taxonomy_term_ofed_team_civility_en_pattern', '');
  if (empty($pattern_en)) {
    variable_set('pathauto_taxonomy_term_ofed_team_civility_en_pattern', 'civility/[term:name]');
  }
  $pattern_nl = variable_get('pathauto_taxonomy_term_ofed_team_civility_nl_pattern', '');
  if (empty($pattern_nl)) {
    variable_set('pathauto_taxonomy_term_ofed_team_civility_nl_pattern', 'aanspreking/[term:name]');
  }
  $pattern_fr = variable_get('pathauto_taxonomy_term_ofed_team_civility_fr_pattern', '');
  if (empty($pattern_fr)) {
    variable_set('pathauto_taxonomy_term_ofed_team_civility_fr_pattern', 'civilite/[term:name]');
  }
  $pattern_default = variable_get('pathauto_taxonomy_term_ofed_team_gender_pattern', '');
  if (empty($pattern_default)) {
    variable_set('pathauto_taxonomy_term_ofed_team_gender_pattern', '[term:vocabulary:i18n-name]/[term:name]');
  }
  $pattern_en = variable_get('pathauto_taxonomy_term_ofed_team_gender_en_pattern', '');
  if (empty($pattern_en)) {
    variable_set('pathauto_taxonomy_term_ofed_team_gender_en_pattern', 'gender/[term:name]');
  }
  $pattern_nl = variable_get('pathauto_taxonomy_term_ofed_team_gender_nl_pattern', '');
  if (empty($pattern_nl)) {
    variable_set('pathauto_taxonomy_term_ofed_team_gender_nl_pattern', 'geslacht/[term:name]');
  }
  $pattern_fr = variable_get('pathauto_taxonomy_term_ofed_team_gender_fr_pattern', '');
  if (empty($pattern_fr)) {
    variable_set('pathauto_taxonomy_term_ofed_team_gender_fr_pattern', 'genre/[term:name]');
  }
}

/**
 * Update content-type labels.
 */
function ofed_feature_team_update_7003() {
  // Change the label of the field; field_ofed_team_contact.
  // Change the description of the field; field_ofed_team_contact.
  // Get the field record.
  $field = db_select('field_config_instance', 'f')
    ->fields('f')
    ->condition('field_name', 'field_ofed_team_contact')
    ->condition('bundle', 'ofed_team')
    ->execute()
    ->fetchAssoc();
  // Edit data.
  if(!empty($field)) {
    $data = unserialize($field['data']);
    $data['label'] = 'Address';
    $data['description'] = 'Enter the first letters of the address that needs to be available on this content item. Make sure that your address content is created as a address content item first.';
    $data = serialize($data);
    // Update the record.
    db_update('field_config_instance')
      ->fields(array('data' => $data))
      ->condition('field_name', 'field_ofed_team_contact')
      ->condition('bundle', 'ofed_team')
      ->execute();
  }
}