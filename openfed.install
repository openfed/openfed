<?php
/**
 * @file
 * Install, uninstall and update hooks for Openfed.
 */

/**
 * Minimum 9.11 schema version to allow upgrading from.
 */
function openfed_update_last_removed() {
  return 8900;
}

/**
 * Implements hook_requirements().
 */
function openfed_requirements($phase) {
  $return = [];
  $moduleHandler = \Drupal::service('module_handler');

  switch ($phase) {
    case 'update':
      // If this is an update from 8.x-8.x we must be sure this is using at
      // least 8.x-8.7. This is a requirement for a smooth update of
      // taxonomy_access_fix so we check its update hooks.
      if ($moduleHandler->moduleExists('taxonomy_access_fix')) {
        $taxonomy_access_fix_schema = drupal_get_installed_schema_version('taxonomy_access_fix');
        $openfed_schema = drupal_get_installed_schema_version('openfed');
        if (version_compare($openfed_schema, 8800, '<=') && version_compare($taxonomy_access_fix_schema, 8201, '<=')) {
          $return['openfed_update_check'] = [
            'title' => t('Openfed: Update Check'),
            'severity' => REQUIREMENT_ERROR,
            'value' => t('Taxonomy Access fix is enabled and you are trying to update Openfed from a version older than 8.x-8.7. This is not supported, please update to Openfed 8.x-8.7 first.'),
          ];
        }
      }
      break;
    case 'runtime':
      // Scheduled updates: check if this is enable. If so, we should throw an error
      // because this module is not well maintained and supported.
      if ($moduleHandler->moduleExists('scheduled_updates')) {
        $return['openfed_scheduled_updated_check'] = [
          'title' => t('Openfed: Scheduled Updates'),
          'severity' => REQUIREMENT_ERROR,
          'value' => t('Scheduled Updates is enabled but not supported so it will be removed before Openfed9. Use Scheduler instead.'),
        ];
      }

      // Sharemessage: check if this is enable. If so, we should throw an error
      // because this won't be supported by Openfed anymore.
      if ($moduleHandler->moduleExists('sharemessage')) {
        $return['openfed_sharemessage_check'] = [
          'title' => t('Openfed: Share Message'),
          'severity' => REQUIREMENT_ERROR,
          'value' => t('Share Message is enabled but not supported so it will be removed before Openfed9. Use Openfed Social instead.'),
        ];
      }
      break;
  }


  return $return;
}

/**
 * Implements hook_update_dependencies().
 */
function openfed_update_dependencies() {
  $dependencies = [];

  if (\Drupal::moduleHandler()->moduleExists('media_entity')) {
    // Ensure that media_entity_update_8201() runs before openfed_update_8601().
    $dependencies['openfed'][8601] = [
      'media_entity' => 8201,
    ];

    // Ensure that openfed_update_8602() and openfed_update_8603() runs before
    // media_entity_update_8201().
    $dependencies['media_entity'][8201] = [
      'openfed' => 8603,
    ];
  }


  return $dependencies;
}

/**
 * Removed in Openfed 8.x-5.0.
 *
 * Formely fixed the problem with file_entity module when upgrading from 8.3.x
 * to 8.4.x.
 *
 * @deprecated
 */
function openfed_update_8201(&$sandbox) {
}

/**
 * Removed in Openfed 8.x-5.0.
 *
 * Formely updated file entity configuration with a new generic file entity.
 * Read more: http://drupal.org/node/2927468.
 *
 * @deprecated
 */
function openfed_update_8202(&$sandbox) {
}

/**
 * Removed in Openfed 8.x-5.0.
 *
 * Formely updated default config due to the new Openfed SVG File field.
 *
 * @deprecated
 */
function openfed_update_8203(&$sandbox) {
}

/**
 * Removed in Openfed 8.x-5.0.
 *
 * Formely fixed entity.definitions.bundle_field_map key store with old bundles.
 *
 * @deprecated
 */
function openfed_update_8401(&$sandbox) {
}

/**
 * Formely updated configs related to core.base_field_override.media.* with the
 * new default_value_callback when upgrading from 8.5.x to 8.6.x, since media
 * is now part of the core.
 */
function openfed_update_8601(&$sandbox) {
  $message = '';

  // Gets the Config Factory service.
  $config_factory = \Drupal::configFactory();
  // Gets the list of media entity bundles.
  /** @var \Drupal\Core\Entity\EntityTypeBundleInfo $media_bundles_info */
  $media_bundles_info = \Drupal::service('entity_type.bundle.info')
    ->getBundleInfo('media');

  // Make sure there are media bundles.
  if (!empty($media_bundles_info)) {

    foreach (array_keys($media_bundles_info) as $bundle_name) {

      // Make sure the configuration exists.
      if (in_array("core.base_field_override.media.{$bundle_name}.uid", $config_factory->listAll("core.base_field_override.media"))) {
        // Gets the editable configuration.
        $config = $config_factory->getEditable("core.base_field_override.media.{$bundle_name}.uid");
        // Sets the new default_value_callback method.
        $config->set('default_value_callback', 'Drupal\media\Entity\Media::getCurrentUserId');
        // Saves the configuration.
        $config->save(TRUE);

        $message .= "Config of $bundle_name was updated.\n";
      }
    }
  }

  return $message;
}

/**
 * This update will make sure that media_entity_document is uninstalled before
 * starting media updates.
 */
function openfed_update_8602(&$sandbox) {
  $message = '';

  $uninstall_status = \Drupal::service('module_installer')
    ->uninstall(['media_entity_document']);
  if ($uninstall_status) {
    $message .= 'Media Entity Document was uninstalled successfully';
  }
  else {
    \Drupal::database()->delete('key_value')
      ->condition('collection', 'system.schema')
      ->condition('name', 'media_entity_document')
      ->execute();
    $message .= 'Media Entity Document was removed.';
  }

  return $message;
}

/**
 * This update will make sure that media_entity_image is uninstalled before
 * starting media updates.
 */
function openfed_update_8603(&$sandbox) {
  $message = '';

  $uninstall_status = \Drupal::service('module_installer')
    ->uninstall(['media_entity_image']);
  if ($uninstall_status) {
    $message .= 'Media Entity Image was uninstalled successfully';
  }
  else {
    \Drupal::database()->delete('key_value')
      ->condition('collection', 'system.schema')
      ->condition('name', 'media_entity_image')
      ->execute();
    $message .= 'Media Entity Image was removed.';
  }

  return $message;
}


/**
 * Update menu_block configs due to patch update.
 */
function openfed_update_8701() {
  // Update used to change the config created with a previous patch. This new
  // config is still not in a stable release but it was already commited to
  // menu_block dev branch.
  if (\Drupal::moduleHandler()->moduleExists('menu_block')) {
    $config_factory = \Drupal::configFactory();
    $count_custom_trails = 0;

    // This piece will work for block configs.
    foreach ($config_factory->listAll('block.block.') as $block_config_name) {
      $block = $config_factory->getEditable($block_config_name);

      // Check if this is a menu_block.
      $plugin = $block->get('plugin');
      if (strpos($plugin, 'menu_block:') === 0) {
        // Do the updates.
        $settings = $block->get('settings');

        // The following code will update from the old settings, provided by a
        // previous patch, to new settings matching the latest dev version.
        if (strpos($settings['parent'], 'active_trail_custom')) {
          // This is a fallback since the new patch doesn't really have this option.
          $settings['parent'] = str_replace('active_trail_custom', '', $settings['parent']);
          $settings['expand'] = 0;
          $settings['follow'] = 0;
          $settings['follow_parent'] = 'child'; // this is not important
          $count_custom_trails++;
          unset($settings['custom_level']);
        }
        else {
          if (strpos($settings['parent'], 'active_trail_parent')) {
            $settings['parent'] = str_replace('active_trail', '', $settings['parent']);
            $settings['follow'] = 1;
            $settings['follow_parent'] = 'child';
          }
          else {
            if (strpos($settings['parent'], 'active_trail')) {
              $settings['parent'] = str_replace('active_trail', '', $settings['parent']);
              $settings['follow'] = 1;
              $settings['follow_parent'] = 'active';
            }
          }
        }
        unset($settings['custom_level']);
        unset($settings['hide_children']);
        unset($settings['expand_only_active_trails']);

        $block->set('settings', $settings);
        // Mark the resulting configuration as trusted data. This avoids issues with
        // future schema changes.
        $block->save(TRUE);
      }
    }

    // This piece will work for page_variants.
    // This piece will work for block configs.
    foreach ($config_factory->listAll('page_manager.page_variant.') as $variant_config_name) {
      $variant = $config_factory->getEditable($variant_config_name);

      // Check if this is a menu_block.
      $variant_settings = $variant->get('variant_settings');
      if (isset($variant_settings['blocks'])) {

        foreach ($variant_settings['blocks'] as &$panel_block) {
          if ($panel_block['provider'] == 'menu_block') {

            // The following code will update from the old settings, provided by
            // a previous patch, to new settings matching the latest dev
            // version.
            if (strpos($panel_block['parent'], 'active_trail_custom')) {
              // This is a fallback since the new patch doesn't really have this option.
              $panel_block['parent'] = str_replace('active_trail_custom', '', $panel_block['parent']);
              $panel_block['expand'] = 0;
              $panel_block['follow'] = 0;
              $panel_block['follow_parent'] = 'child'; // this is not important
              $count_custom_trails++;
              unset($panel_block['custom_level']);
            }
            else {
              if (strpos($panel_block['parent'], 'active_trail_parent')) {
                $panel_block['parent'] = str_replace('active_trail_parent', '', $panel_block['parent']);
                $panel_block['follow'] = 1;
                $panel_block['follow_parent'] = 'child';
              }
              else {
                if (strpos($panel_block['parent'], 'active_trail')) {
                  $panel_block['parent'] = str_replace('active_trail', '', $panel_block['parent']);
                  $panel_block['follow'] = 1;
                  $panel_block['follow_parent'] = 'active';
                }
              }
            }

            unset($panel_block['custom_level']);
            unset($panel_block['hide_children']);
            unset($panel_block['expand_only_active_trails']);
          }
        }

        $variant->set('variant_settings', $variant_settings);
        // Mark the resulting configuration as trusted data. This avoids issues
        // with future schema changes.
        $variant->save(TRUE);
      }
    }

    $message = t('Block settings updated.');
    if ($count_custom_trails > 0) {
      $message .= ' ' . t('There were :count custom active trails updated.', [':count' => $count_custom_trails]);
    }
    return $message;
  }

  return t('Menu Block is not installed.');

}

/**
 * This update will make sure that media_entity is uninstalled, avoiding errors
 * on some installations.
 */
function openfed_update_8702(&$sandbox) {
  $message = '';

  $uninstall_status = \Drupal::service('module_installer')
    ->uninstall(['media_entity']);
  if ($uninstall_status) {
    $message .= 'Media Entity was uninstalled successfully';
  }
  else {
    \Drupal::database()->delete('key_value')
      ->condition('collection', 'system.schema')
      ->condition('name', 'media_entity')
      ->execute();
    $message .= 'Media Entity was removed.';
  }

  return $message;
}

/**
 * This update will update pathauto settings, adding missing safe token.
 */
function openfed_update_8800(&$sandbox) {
  $message = '';
  $config_factory = \Drupal::configFactory();

  $config = $config_factory->getEditable('pathauto.settings');
  $safe_tokens = $config->get('safe_tokens');
  if (!in_array('node:field_menulink:join-parents-path', $safe_tokens)) {
    $config->set('safe_tokens', array_merge($safe_tokens, ['node:field_menulink:join-parents-path']))
      ->save(TRUE);
    $message .= 'Pathauto safe tokens updated.';
  }

  return $message;
}

/**
 * Fix long lost modules are missing from the filesystem.
 */
function openfed_update_81000(&$sandbox) {
  $modules = [
    'media_entity',
  ];
  \Drupal::database()->delete('key_value')
    ->condition('collection', 'system.schema')
    ->condition('name', $modules, 'IN')
    ->execute();
}


/**
 * Uninstall wbm2cm because it's unlikely that it gets ported to D9.
 */
function openfed_update_81001(&$sandbox) {
  $modules = [
    'wbm2cm',
  ];
  \Drupal::service('module_installer')->uninstall($modules);
}
